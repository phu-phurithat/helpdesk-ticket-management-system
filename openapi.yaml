openapi: 3.0.1
info:
  title: OpenAPI definition
  version: v0
servers:
  - url: http://localhost:8080
    description: Generated server url
tags:
  - name: Ticket API
    description: Operations related to tickets
paths:
  /api/v1/tickets/{id}:
    put:
      tags:
        - Ticket API
      summary: Update a ticket
      description: Updates the details of an existing ticket.
      operationId: updateTicket
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TicketUpdateRequest'
        required: true
      responses:
        '200':
          description: Ticket updated successfully
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/TicketResponse'
        '404':
          description: Ticket not found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/TicketResponse'
  /api/v1/tickets/{id}/status:
    put:
      tags:
        - Ticket API
      summary: Update ticket status
      description: Updates the status of a specific ticket.
      operationId: updateTicketStatus
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TicketUpdateStatusRequest'
        required: true
      responses:
        '200':
          description: Ticket status updated successfully
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/TicketResponse'
        '400':
          description: Invalid status value
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/TicketResponse'
        '404':
          description: Ticket not found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/TicketResponse'
  /api/v1/tickets:
    get:
      tags:
        - Ticket API
      summary: Get all tickets
      description: Retrieves a paginated list of tickets with optional sorting and filtering.
      operationId: getAllTickets
      parameters:
        - name: sortBy
          in: query
          required: false
          schema:
            type: string
            default: lastUpdate
        - name: direction
          in: query
          required: false
          schema:
            type: string
            default: desc
        - name: pageSize
          in: query
          required: false
          schema:
            type: integer
            format: int32
            default: 10
        - name: page
          in: query
          required: false
          schema:
            type: integer
            format: int32
            default: 0
        - name: status
          in: query
          required: false
          schema:
            type: string
      responses:
        '200':
          description: List of tickets retrieved successfully
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Page'
    post:
      tags:
        - Ticket API
      summary: Create a new ticket
      description: Creates a new ticket and returns the created ticket details.
      operationId: createTicket
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TicketRequest'
        required: true
      responses:
        '201':
          description: Ticket created successfully
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/TicketResponse'
        '400':
          description: Invalid request payload
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/TicketResponse'
components:
  schemas:
    TicketUpdateRequest:
      required:
        - contact
        - description
        - status
        - title
      type: object
      properties:
        title:
          type: string
        description:
          type: string
        contact:
          type: string
        status:
          pattern: PENDING|ACCEPTED|RESOLVED|REJECTED
          type: string
    TicketResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
        title:
          type: string
        description:
          type: string
        contact:
          type: string
        status:
          type: string
          enum:
            - PENDING
            - ACCEPTED
            - RESOLVED
            - REJECTED
        createdDate:
          type: string
          format: date-time
        lastTicketUpdate:
          type: string
          format: date-time
    TicketUpdateStatusRequest:
      type: object
      properties:
        status:
          type: string
    TicketRequest:
      required:
        - contact
        - description
        - title
      type: object
      properties:
        title:
          type: string
        description:
          type: string
        contact:
          type: string
    Page:
      type: object
      properties:
        totalPages:
          type: integer
          format: int32
        totalElements:
          type: integer
          format: int64
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            type: object
        number:
          type: integer
          format: int32
        sort:
          $ref: '#/components/schemas/SortObject'
        first:
          type: boolean
        last:
          type: boolean
        numberOfElements:
          type: integer
          format: int32
        pageable:
          $ref: '#/components/schemas/PageableObject'
        empty:
          type: boolean
    PageableObject:
      type: object
      properties:
        offset:
          type: integer
          format: int64
        sort:
          $ref: '#/components/schemas/SortObject'
        unpaged:
          type: boolean
        pageSize:
          type: integer
          format: int32
        pageNumber:
          type: integer
          format: int32
        paged:
          type: boolean
    SortObject:
      type: object
      properties:
        empty:
          type: boolean
        unsorted:
          type: boolean
        sorted:
          type: boolean
